"""
풀이 시간: 38분

<input>
- n: 수업의 개수
- s(강의 시작 시간), t(강의가 끝나는 시간)가 n개 주어짐

<solution>
수업이 아직 끝나지 않았다면 해당 강의실은 쓸 수가 없다.
-> 현재 진행 중인 수업이 끝나야지만 그 강의실을 쓸 수 있다.
1. 가장 먼저 시작하는 강의의 강의가 끝나는 시간을 최소힙에 삽입
2. 두 번째로 가장 먼저 시작하는 강의부터 가장 늦게 시작하는 강의를 순회한다.
- 현재 확인하고 있는 강의의 시작시간이 가장 일찍 끝나는 강의의 종료시간과 같거나 크다면, 해당 강의실을 그대로 사용할 수 있는 것이기 때문에 힙에서 종료시간을 갱신
- 현재 확인하고 있는 강의의 시작시간이 가장 일찍 끝나는 강의보다 더 먼저 시작한다면, 강의실을 추가로 배정해야 하기 때문에 해당 강의의 끝나는 시간을 최소힙에 넣어줌


<시간 복잡도>
O(NlogN)
"""
import sys
input = sys.stdin.readline
import heapq


# 수업의 개수
n = int(input())

# (시작 시간, 끝나는 시간)을 원소로 갖는 리스트
schedule = [tuple(map(int, input().split())) for _ in range(n)]
schedule.sort() # 강의 시작 시간을 기준으로 오름차순 정렬(이후 끝나는 강의가 있으면 제일 빨리 시작하는 강의를 집어넣기 위해)

assign = [] # 강의실 배정 상황(끝나는 시간)
heapq.heappush(assign, schedule[0][1]) # 가장 일찍 시작하는 강의의 끝나는 시간을 최소힙에 집어넣기

for s, e in schedule[1:]: # 두 번째로 일찍 시작하는 강의부터 가장 늦게 시작하는 강의까지 순회
    if s >= assign[0]: # 시작 시간이 가장 빨리 끝나는 회의실의 종료시간과 같거나 크다면 해당 강의실을 이어서 사용 가능
        heapq.heappop(assign)
    heapq.heappush(assign, e)

print(len(assign))