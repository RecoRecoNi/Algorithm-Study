"""
풀이 시간: 15분

<입력, 제한사항>
- scoville: Leo가 가진 음식의 스코빌 지수 배열(길이 2 이상 1,000,000)
- scoville의 원소는 각각 0 이상 1,000,000이하
- K: 원하는 스코빌 지수(0 이상 1,000,000,000 이하)
- 모든 음식의 스코빌 지수를 K이상으로 만들 수 없는 경우 -1 return
- 섞은 음식의 스코빌 지수 = 가장 맵지 않은 음식의 스코빌 지수 + (두 번째로 맵지 않은 음식의 스코빌 지수 * 2)

<풀이>
scoville의 길이가 최대 1,000,000이기 때문에 최대 O(NlogN)의 알고리즘으로 설계해야된다.
매 번 가장 맵지 않은 음식과 두 번째로 맵지 않은 음식을 섞은 후, 다시 scoville에 추가하고 정렬한다면 시간초과가 날 수 밖에 없음
-> 힙은 삭제 및 삽입 연산이 O(logN)이기 때문에 힙 자료구조를 사용해야 됨

<시간 복잡도>
O(NlogN)
- 리스트(모든 음식)를 힙 자료구조로 변환(heapify): O(N)
- 최악의 경우 모든 음식을 섞어야 할 수도 있음(N-1번) : O(N)
- 섞는 동안 발생하는 heappop, heappush: O(logN)
"""


from typing import List
import heapq

def solution(scoville: List, K: int) -> int:
    """
    scoville: Leo가 가진 음식의 스코빌 지수 배열
    K: 원하는 스코빌 지수
    """
    answer = 0 # 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 섞어야 하는 최소 횟수
    heapq.heapify(scoville) # 최소힙 정렬
    while scoville[0] < K: # 가장 맵지 않은 음식이 K보다 작을 때
        answer += 1
        if len(scoville) >= 2: # 가장 맵지 않은 음식과 두 번째로 맵지 않은 음식을 꺼내서 섞기
            first = heapq.heappop(scoville)
            second = heapq.heappop(scoville)
            heapq.heappush(scoville, first + second * 2)
        else: # 음식이 하나인데 K보다 작다면 모든 음식을 원하는 스코빌 지수로 만들 수 없음
            return -1
    return answer

"""
정확성  테스트
테스트 1 〉	통과 (0.01ms, 10.6MB)
테스트 2 〉	통과 (0.00ms, 10.5MB)
테스트 3 〉	통과 (0.01ms, 10.6MB)
테스트 4 〉	통과 (0.01ms, 10.3MB)
테스트 5 〉	통과 (0.00ms, 10.5MB)
테스트 6 〉	통과 (0.46ms, 10.5MB)
테스트 7 〉	통과 (0.38ms, 10.4MB)
테스트 8 〉	통과 (0.06ms, 10.4MB)
테스트 9 〉	통과 (0.05ms, 10.5MB)
테스트 10 〉통과 (0.31ms, 10.4MB)
테스트 11 〉통과 (0.20ms, 10.4MB)
테스트 12 〉통과 (0.75ms, 10.5MB)
테스트 13 〉통과 (0.38ms, 10.4MB)
테스트 14 〉통과 (0.02ms, 10.5MB)
테스트 15 〉통과 (0.50ms, 10.6MB)
테스트 16 〉통과 (0.00ms, 10.5MB)
테스트 17 〉통과 (0.00ms, 10.6MB)
테스트 18 〉통과 (0.00ms, 10.5MB)
테스트 19 〉통과 (0.01ms, 10.6MB)
테스트 20 〉통과 (0.01ms, 10.6MB)
테스트 21 〉통과 (0.01ms, 10.4MB)
테스트 22 〉통과 (0.01ms, 10.5MB)
테스트 23 〉통과 (0.01ms, 10.3MB)
테스트 24 〉통과 (0.01ms, 10.5MB)
테스트 25 〉통과 (0.01ms, 10.6MB)
테스트 26 〉통과 (0.01ms, 10.4MB)

효율성  테스트
테스트 1 〉	통과 (173.61ms, 16.5MB)
테스트 2 〉	통과 (367.68ms, 22.2MB)
테스트 3 〉	통과 (1803.39ms, 50.3MB)
테스트 4 〉	통과 (147.42ms, 15.4MB)
테스트 5 〉	통과 (1740.07ms, 52.1MB)
"""