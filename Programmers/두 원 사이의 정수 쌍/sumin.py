"""
풀이 시간: 40분

<Input>
1 ≤ r1 < r2 ≤ 1,000,000 -> O(N)으로 설계

<Solution>
1. 1사분면에서 x좌표를 기준으로 정수 좌표의 개수를 구한다.
- 피타고라스 정리를 사용
- 처음에 이 부분에서 애를 먹었는데, "각 원 위의 점도 포함하여 셉니다."라는 조건이 있기 때문에 r1=5, x=3일 때와 같이 원 위에 좌표가 생기는 경우를 고려해야 한다.
2. 위에서 구한 개수에 x 4를 해줘 전체 개수를 구한다.
3. x축과 y축에 찍히는 좌표의 개수를 추가해준다.

<Reference>
- https://sasca37.tistory.com/320
"""

import math
def solution(r1, r2):
    answer = 0 # 두 원 사이의 공간에 x좌표와 y좌표가 모두 정수인 점의 개수

    for x in range(1, r2): # x좌표가 1부터 r2-1까지
        if x < r1: # x좌표가 r1보다 작다면 r2 반지름의 원에서 생기는 좌표의 개수에서 r1 반지름의 원에 생기는 좌표의 개수를 빼줌
            answer += count(x, r2, "large") - count(x, r1, "small")
        else: # x좌표가 r1과 같거나 더 크다면, r2 반지름의 원에서 생기는 좌표의 개수만 구하면 된다.
            answer += count(x, r2, "large")
    answer *= 4
    answer += 4 * (r2 - r1 + 1) # x축 및 y축에 찍히는 좌표의 개수

    return answer


def count(a, c, kind): # 밑변이 a, 빗변이 c인 삼각형을 이용해, 반지름이 c인 원의 x좌표에서 생기는 정수 좌표의 개수
    b = math.sqrt(c**2 - a**2)
    cnt = int(b)
    if kind == "small" and b == cnt: # 작은 원이 정수 좌표와 일치하는 지점이 있을 때, 원 위의 점도 포함시켜야 하기 때문에
        return cnt-1 # 개수를 하나 빼준다(ex. r1=5, x=3)
    return cnt

"""
테스트 1 〉	통과 (0.02ms, 10.1MB)
테스트 2 〉	통과 (0.04ms, 10.2MB)
테스트 3 〉	통과 (0.06ms, 10.3MB)
테스트 4 〉	통과 (2.84ms, 10.4MB)
테스트 5 〉	통과 (0.84ms, 10.3MB)
테스트 6 〉	통과 (4.40ms, 10.3MB)
테스트 7 〉	통과 (701.70ms, 10.2MB)
테스트 8 〉	통과 (1411.76ms, 10.2MB)
테스트 9 〉	통과 (666.18ms, 10.2MB)
테스트 10 〉	통과 (979.39ms, 10.2MB)
"""
