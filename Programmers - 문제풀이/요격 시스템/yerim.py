"""
[초기 아이디어]
1. 단위 구간 (i, i+1) 마다 폭격 미사일 개수를 구해서, 많은 곳부터 요격
2. 요격한 미사일의 개수가 전체 폭격 미사일 개수와 같아질 때까지 요격 => 요격이 끝난 후 요격 개수를 답으로 제출
=> 이 아이디어의 문제 : 요격하고 나면, 요격한 폭격 미사일마다 그 구간을 추적해 개수를 0으로 초기화해주어야 하는 과정이 복잡함

- 따라서 아래 [블로그](https://velog.io/@damin1025/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%9A%94%EA%B2%A9-%EC%8B%9C%EC%8A%A4%ED%85%9C)를 참고해 풀이

[접근 방법]
그리디 알고리즘
1. 폭격이 빨리 끝나는 순서대로 (e 기준으로) 오름차순 정렬
2. 정렬된 폭격 미사일을 쭉 돌면서, s가 e보다 앞에 있으면 같이 요격 가능 (=count를 올리지 않음)
3. s가 e를 넘는 순간이 오면, 이전 요격이 끝나며 새로운 요격을 시작
4. 새로운 요격을 시작할 때마다 count => 이 count한 개수를 답으로 제출!

"""


def solution(targets):
    answer = 0
    targets.sort(key=lambda x: x[1])  # e 기준 오름차순 정렬
    trgt_in = 0

    for s, e in targets:
        if trgt_in <= s:  # 이전 요격이 끝나고 새로운 요격을 할 수 있을 때
            answer += 1
            trgt_in = e

    return answer
